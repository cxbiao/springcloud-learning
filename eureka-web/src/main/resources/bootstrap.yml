server:
  port: 8400

spring:
  #zipkin:
    # 若在同一个注册中心的话可以启用自动发现，省略base-url
    #spring.zipkin.locator.discovery.enabled=true
   # base-url: http://localhost:9411 #所有的数据提交到此服务之中
#    sender:
#      type: web  #提交的类型是web 服务
  sleuth:
    sampler:
      probability: 1.0   #定义抽样比率，默认为0.1
  application:
    #微服务名
    name: micro-web


#hystrix.stream  开放所有的监控接口
management:
  endpoint:
    health:
      show-details: always
    shutdown:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'

eureka:
  client:
    service-url:
      defaultZone: http://bryan:123456@localhost:8763/eureka/
      #表示eureka client间隔多久去拉取服务注册信息，默认为30秒
    registry-fetch-interval-seconds: 30
    #健康检测 默认是关闭的
    healthcheck:
      enabled: true
  instance:
    #服务续约，心跳的时间间隔,默认30s
    lease-renewal-interval-in-seconds: 10
    #如果从前一次发送心跳时间起，90秒没接受到新的心跳，讲剔除服务,默认90s
    lease-expiration-duration-in-seconds: 20
    #设置实例id 每个服务下会有多个实例，这个id是唯一的
    #instance-id: ${spring.application.name}:${server.port}
    #使用ip显示
    prefer-ip-address: true

#feign开启熔断器
feign:
  hystrix:
    enabled: true
  compression:
    request:
      enabled: true
      mime-types: # 可以被压缩的类型
        - text/xml
        - application/xml
        - application/json
      min-request-size: 2048 # 超过2048的字节进行压缩

#配置feign日志级别
logging:
  level:
    com.bryan.cloud.web.service.feign: debug



hystrix:
  command:
     default:
       execution:
          isolation:
            thread:
                 #全局超时时间 要比ribbon的readTimeOut(+包括重试)超时时间长
                 timeoutInMilliseconds: 30000
     errorMessage:
        execution:
          isolation:
            thread:
              timeoutInMilliseconds: 1000000000



#hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds=2000
#hystrix.command.<commandKey>作为前缀,默认是采用Feign的客户端的方法名字作为标识
#  hystrix.command.saveStudent.execution.isolation.thread.timeoutInMilliseconds=6000
#  hystrix.command.queryContents.circuitBreaker.sleepWindowInMilliseconds=20000
#  hystrix.command.errorMessage.execution.isolation.thread.timeoutInMilliseconds=100000000000

# 关闭ribbon访问注册中心Eureka Server发现服务，但是服务依旧会注册。
#true使用eureka false不使用
ribbon:
# 设置httpclient 超时时间才生效,然后重试（超过重试次数，报错），不配置的话不会有超时
#  http:
#    client:
#      enabled: true
  eureka:
    enabled: true



#指定调用的节点    localhost:8001  localhost:8002  localhost:8003
#MICRO-ORDER:
#  ribbon:
#    listOfServers: localhost:8001,localhost:8002,localhost:8003

#默认有重试 要大写(?) ,应该和大小写无关，这样配置实测无效
#MICRO-ORDER:
#  ribbon:
#    #单位ms ,请求连接超时时间
#     ConnectTimeout: 10000
#    #单位ms ,请求处理的超时时间
#     ReadTimeout: 5000
#     #是否所有操作都要重试 false:只对get请求重试
#     OkToRetryOnAllOperations: true
#     #对当前实例的重试次数 当Eureka中可以找到服务，但是服务连不上时将会重试
#     MaxAutoRetries: 0
#     #切换实例的重试次数
#     MaxAutoRetriesNextServer: 1
#     NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
#     NFLoadBalancerPingClassName: com.netflix.loadbalancer.PingUrl

